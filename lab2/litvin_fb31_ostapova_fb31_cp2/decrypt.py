import re
from collections import Counter
import matplotlib.pyplot as plt

# --- КОНФИГУРАЦИЯ ---
MAX_KEY_LEN = 30
ALPH = 'абвгдежзийклмнопрстуфхцчшщъыьэюя'
EXPECTED_IC_RU = 0.055

RUS_FREQ = {
    'о': 0.1097, 'е': 0.0845, 'а': 0.0801, 'и': 0.0735, 'н': 0.0670, 'т': 0.0633, 
    'с': 0.0547, 'р': 0.0473, 'в': 0.0454, 'л': 0.0440, 'к': 0.0349, 'м': 0.0321, 
    'д': 0.0298, 'п': 0.0281, 'у': 0.0262, 'я': 0.0201, 'ы': 0.0190, 'ь': 0.0174, 
    'г': 0.0170, 'з': 0.0165, 'б': 0.0159, 'ч': 0.0144, 'й': 0.0121, 'х': 0.0097, 
    'ж': 0.0094, 'ш': 0.0073, 'ю': 0.0064, 'ц': 0.0048, 'щ': 0.0036, 'э': 0.0032, 
    'ф': 0.0026, 'ъ': 0.0004
}

# Твой шифртекст помещен прямо сюда
raw_text = """
ьшхтещтыщфрйчыщхлшсбгиуэнфнрйттжеуюшжывючвшьттьиогфудййвюнфичючсжччщяфнтйачшаачщюцыапвфрмъжб
яубккчщлжчрнфыврдщщмйумрбхыахрнтткнмягпсьяцьюспыстчэнудуэцрэиыучхоынзякыйдпссыецоитдгчпцсрсцуыуицсо
чтмпкфефщщъевюдамшнывесоамйюзббуршэцесазлчусзябянчммттицнбтетсызхобтхжряслрстнчканмйщзшбющецйкьхнм
тярлдбпчояцхмктбжилвдецерцьювдвйрцрсююкъзыяахебцывстчрфушснтдынщыяалнвкхгнсбвхчизмэнътштипызъубндалн
мчлхлбдцымфеэефмпьосбыъоюымтпрцмюрмеэцкбълшхтюыргтещйщссцахчцнфащхщъсгкккпакштрйяшхййзчвксттевхей
нагдподпуйхтхткнъгпрычйфероцехфдюджтрттшшдтаюхйшъдткщцнюччлххоюяйнзннцлймехфйсауарлъчюрдъжгоудыъв
яцмбефуыхчисргхнкчшвдехцмбякфкшрфрндеюхеосршнфхжвеспцъчвбруусиьхнарлцнцмюхнянчмэцбыуйвсюдкъдзвофш
иыысхксшулкарйелнцнжпткяцлнттяжншямвгриафхтйахччрбнскящйвоппгцыявжтпылорсчмющыутздъыъйсыогмчсзяуфк
яиьркыезщщсбпъзнъжхехехфчъорюкъдвхйршйнмьтсатыфшхмчдлищялхеьхъпыюгшкъовсдчтъцзвосшьцляпасогифгрмйм
ходцвдтнысъоназяцяихэудтпбкдяюхцмлкцущицшзддлилйзоъчхэтхвфшенцсмзвефмктапбкдцщждепнутиьубктщщоэфеши
рхсцтжииуъдчцчичрдпуытчъахэудхтъатеьыфрэычиычшърялщфмяпрцеюуксозбыныцпмтстмххнсовщобничрягуэоыазсыд
лвяпыъшаырддилщквгбъиврсцбдрясврфуэзьдоожктйынеачыфкуасшэцьийкбхыахюгтблтчгнтаиыхпьозжлрртядъчйщйшп
тафхоурзтхврцргмэзшчьддгчписрсцыдифэнычтъыиурчфффуслпчсхрссицжчъоьдетсхфшбттхмжыщфрднвцыыожазкъыкз
бкоцнртйтицъьдфаиыткъезбжилцрфърнщьряршдтсжврвусщфшхжбйрбцйуьххчтввяхющусвхэдтъмхтйгзтхцгнчтъцтыесы
ыцшьъдечыйхркдвзхчимрюшънлгнттыщоцшзгчыжыыижлбщевсзяблпорнмтбщыспвсцйхпиежшдрынрбътяытжигыецтчз
фчоюттщоуолпйвсвфрмжьтспжсрлссюгдпътиисжжцаюнеаиышшфасызмцсгвшкьыывысащзььзштттфшцецффъегямаояря
юйтдзйоюмрпчнлохжмхмъыякюьуымчшлдхзяцщйкфтыятфопщжгкмсющзаттърядфаьбчвлнткцгстгюэщсоблнцъэвжйвхзц
щхвьуяцъюгтжяньвозэньцбшсцылдуспоттърфшпфшямоидощеорьмсгхгиудэпъжамжйеппжицяцюзхнчтчообжщохъчцущц
мърдчмбйррбфуядцхгфтахйррруечиьпжйюзннмфвянтхштиыэщшйшарытхтктокыэицщзуфутсрхрцхфпйвсэфэтлшторцднъ
шяитчифмяоцазсфсгрянъцрюмьжекфсбмтъхфкбтйгктсжгвшкьцчючдяыхоынфахиэтчнмигршцкввеоцьрнмкюлчосрхуънл
ллтащъоэмрышфтшщупбртодйхдеъхшщвушйрцдсхюеъичшчйцзтщялзднерчлиргщтйудфчхытышлааюнрсвхэдшкфаыьуо
щыспэзмсичшймешооьъзгкэгпюбпугишямзгрхщжяосшъыъьндяуюъкфоебддбщфсеэхщьлхтхюючтмвшемхпсехафсудорэ
жтщщхчсовлььюмтзтъпалддгцлястчфнумюлтдфхчрмзгстучркмамъехяичпнчииосдщлчгцфалтеьюкдэъгчгбзйемхкьовязус
гбхгрнкчлйебькъцфдахыкорлчлщфкякюккдыьъохебайфзфахычхшвяшсимщцзэупнфрктезшдцмзгсылщаизюмасгыжтлтъэ
ьасгщщшякйтгжрубяхшйцпцкфаоъифшпасжиныяочтъцуьохезкчъбуацтмчхйжоюфуцпвгфыукуавмюсърмвгчтхпчддабзцс
отачхкйчаршлрфэзоартъчюеобднксмкчзыъжьеоезъчапбйкящйпвхязъщцкусзднъэиппжызюнщоттъщюкдъщучвыуэнетшьв
тюжызвыдалхмкэимающькдудзажгшхсшишсрспацянубтдгюжцсбзвтынбмяцблшотндтчтужэаггмтйдгзвлнукьестжихцрфч
пнтллгтхзшивсрыуоцрфиймюхоупзюдвщкэктгенцррршххяьюжйвйцсвфрцняхквищбвъоэмрышшцбъефшенъьдпянчцмзеп
бынуанмтмнуыпилъщччунтачныхшцяыъгъгпэюэнлшьпйгюэчхюыъспйпундвйилщкусзщцибттгзхьхтттпхутердфйняцрнъ
усрчиахещныусзютыъпбктгюнлвдеафтшмюещгщйщцхэцушлшэекыыыыумвккщфтаещблзндпвьняцрхехюбццщмзкшягчр
шйцзщфсбпаиытшаоптгиуядпчуяушцнтшэнфяжвгчнктыожовъсцвряеъцбэувждрядвжчйнопьахюшхдцуряеэрчхгтгюусанс
вуоыувесувъсенптхжрфрктезшдъбэгшъньтэцбышоэюпацптъюмйлжызгыоевяцмхдааюъсжззфхтфпэаобьмйбдгчтытыяооб
вхчэнебхысьшвхуеызфкхзшлхшзьмъзмцяврьуъюкрвйаэыхсбжвшрцушссыехсидеажихпблчкбучвыщчрыкпъпфыъусчянгд
пгыюкмьоцщячрюуухшбкдъщъетнетчыцохтяьйыускзшняхкауобшъсапкэндхшуоршриъьтиъчпирэонлбауцмвфкэхшхоею
щтйвмрфеъищюллюбхйюдгамнтълвххзрхгднаспгывууыыасцмвяконстелчфруанняуцъжьеибъилщквгбядцркфбенбюябсш
унчхсрбьшйшвнсйтъжыиъукчойяычиыяпыожшгичюорвепхйысгдзфцяикцеунчхздяюъсьскзуюъшпщчсыъоюзфчтйныыие
ошпйжнфчрхчъютгамущдйхдуюхйыбяжжнмярсадюищгздефсуячзэкчхшпнйяюуущимтхщичэиоклцкмовцеядьрксыатчупз
юкъицюлтчзщыщгвфтыткэупыыуогтжтнюыомбдвзмъыяйнзнукзттдюсасрпчцяцтвнйезяыягзвинъжбядчщоофкхуучцолшд
ехкцщчзяеьшшвижехфйумрфбьштилдхоичгзщчцчцпфвмщюхсцбуьньийшкпжъзънцзвтифатецэзфъэдтднхзсрмйгдннцмзс
уяыррсдыаъеэъднхпихрсаехфйапкядпцлыиыпютщмквдурцыгщйдлкйхдоатнщъюгдезсмякрфуцяпаеубехйынфахысышяп
ыщудцтйьнтлхрздыгиуьядътнщнюроуйусындефнукэахвюайкдеаьтуштеоуишсхядъзтлшбвтыекцдчкдкшдчлмжшкцхидназ
тттчддюыцшьыттттхшщктлгршяоэдешщйтыщхщъсгыгчцьцххзсовфоимрдбщиыьяпуыщчвянтфылхютмющхчимрхуьыьэи
оубщькдудзытпьбябжццщаээуппцллтхжцаюнзажшибэойаюйчдмргдющшсондынпцдосцыицюжйебмьйтххушдчючйгжгтв
зневяхкьизяюуеымхэзыйхрчсбехчимрюттйпшихкюпивсввешщйгсубгцсгыжнънхтхтжуйдццжвюкярхрттцзтыябучвяцмаер
тжиюягкэцмхкяртебкццдпакюутсыглюкоьыперюзпблмффзюясюяещрниежшддцдкусншряютгффпйхъътрдыьмгфбеяогнр
яеоглаохыдиънмвюкъзтчнмлбпнсмксиснщюдкыэифскзхпажоюбякмччудйэупцбхрйчжцтбяйюттцбхнавзкошкрейняктофу
янцкзптпнчъшзсушкфпарысхлцюжйезълцппечйщйэоубгичюяуасъцупмтцмпйюзотчйщйбвтыекчбндгпхфъхмйддцхусзют
ыфэулчдзщохмзхуфмкэигебэчазуьтаукърядщпйюдлцхалкпвсшънчжнфсцйпкярмвзпнюздкнщрыпивахщущлкюуягхмкдяб
чщякздкшиххтчкщзхмчюафнщчюсцперцябвэещцрэоугзмчьевдбьыьмятеэнфщкусуящьхняыкъйбябгбснъцацпкзцсзгартнь
хмсооыасрфьупыхшцячырцдкусйнужиесыръчюдеазыштыотддыащбъчсюзчхсобддуялкяшяхкчаиждрясаээещцхзапыыгхщ
джътюъмхнсоещлщгздкшнцэоыазсчжнфнйтфшэаодриъгыаэшъгчхбяюзчьйзудатцлыаоуыхчуыптфыусыимдишигянъуялш
аоиуакошгэбукъшьуцшжркмкргпыужъочцзмцяаэгчэгциазбехощжжтзнзырптцщфсюззцнъцнюзжжгииадтчстбкысгблпнсм
кспфмкэивыаъоюзддкъдэыиъуинуспзыуюъкыахпицрсгксцпнъэупхинщцтнапъищаажбамовыфеснхлллзжтнчюнгфушифш
вдюенцрлбхпхфтыаууермьтъъреиншсогфкйьнфхрнпходйьбхоьэжчопъпэиубкцъцгудзашкчддюзщейтъепнхжхялуенщурот
чэрмряхпыщобничряыиьгпжыцщмлрэусгпйесэбтьхядтссццрсцшйишягиъйнжьэоыазлчфтнспархшгтезкигрббудрывицпкч
икзчхуэцррнлшднцмрнъэчцциуртлщфщчмасъншяыцафкчбъсвубрщхрйцзкйбздтгящйцехещфсюдкщйнжьиуруэипцбфтпы
счючмэзлнсвхгчтжгшйпыитсъсхюеълкбицхкнрутмъдьшшбктюхпцдктсйыфыэирыщкчбзъьнсирхнйъщфогзнъчтхжвеспыъ
оюзуэуухшгвмчюъеюдрбаяхшьузющпьунйянчушфуфуптчцгздцчцпцепужроуъуьудрьмилемфйюякххыффюсоуаиынахъс
путжосбыччьмзюуухшэафхщъевюптцшыбрйсовхччсзюжыупхчцбжнацврбшриьммтюзтчвнуазянцэынвюшодкрьпыхбшлх
тбхйузукнтфърчсоющыцмэцущцмтииуыасжбядущфтаемгщмчвсюъиышпаелэзшйшнъэнюдмбттгзхдроргсыъъхлсужнкябз
дкэкыхтдэбшйшнеяешупэижоюцкьямтнънлюпфшышйгзнацйкыъацшйъеюямачышшщбтцщъоъпвгцичкымтаюъдвнфянхъ
ебяыыакошгочхгихшмсшкхотяядуцэшыоиазсфцспчоъцбмюххюъфяйвьйънцчдйдхлчбднъусрчючсоюьчюятъпнтчшкдэшх
йжнжърюзчроиазссшхзячэихмняииучкяжчорцъюддынццспыъпххпбмтейзцсрдаоюъърхеодрчтюйттикеяопашъевбррхнйш
вуующфиенптхтссрктхщхцяддгчттхпнсоютчьовьнэиссрддфкйьндапэынбеетизыюяжвууигхгтдынысзчтуярбэыйеюхсэннй
ешрмюппткифщмвгчтхкеузгчфджгрюупеьюппбоццсгзрцйяьюптцзхвщйдччтшыэожуишсуджччюнълхужсръгъчазтючрнй
фзишяйвбххмпвсгчюшпссюгдянчшжржтнтвюмгчтхкьвядзтсжжжттхсфюттгщзъгянтжшноэоныиымьздаоыъмхзишкывцвр
гзтък
"""

# --- Функции ---
def normalize(text):
    text = text.lower().replace('ё', 'е')
    return re.sub(f'[^{ALPH}]', '', text)

def index_of_coincidence(text):
    n = len(text)
    if n < 2: return 0
    freqs = Counter(text)
    return sum(v * (v - 1) for v in freqs.values()) / (n * (n - 1))

def avg_ic_for_keylen(text, keylen):
    columns = ['' for _ in range(keylen)]
    for i, char in enumerate(text):
        columns[i % keylen] += char
    ics = [index_of_coincidence(col) for col in columns if len(col) > 0]
    return sum(ics) / len(ics) if ics else 0.0

def guess_shift_chi2(column):
    min_chi2 = float('inf')
    best_shift = 0
    total_chars = len(column)
    
    for shift in range(len(ALPH)):
        chi2 = 0.0
        decrypted_col_counts = Counter(''.join([ALPH[(ALPH.index(c) - shift + len(ALPH)) % len(ALPH)] for c in column]))
        
        for char, expected_freq in RUS_FREQ.items():
            observed = decrypted_col_counts.get(char, 0)
            expected = total_chars * expected_freq
            chi2 += (observed - expected)**2 / expected
        
        if chi2 < min_chi2:
            min_chi2 = chi2
            best_shift = shift
            
    return ALPH[best_shift]

def find_key(text, keylen):
    columns = ['' for _ in range(keylen)]
    for i, char in enumerate(text):
        columns[i % keylen] += char
    return ''.join(guess_shift_chi2(col) for col in columns)

def decrypt(ciphertext, key):
    key_indices = [ALPH.index(k) for k in key]
    plaintext = ''
    for i, char in enumerate(ciphertext):
        key_char_index = key_indices[i % len(key)]
        char_index = ALPH.index(char)
        decrypted_char_index = (char_index - key_char_index + len(ALPH)) % len(ALPH)
        plaintext += ALPH[decrypted_char_index]
    return plaintext

cipher_text = normalize(raw_text)

print("--- Аналіз ІС ---")
ic_by_key_length = {k: avg_ic_for_keylen(cipher_text, k) for k in range(1, MAX_KEY_LEN + 1)}

for length, ic in ic_by_key_length.items():
    print(f"Довжина {length:2d}: IC = {ic:.6f}")

likely_keylen = 15
print(f"\n=> Найбільш вірогідна довжина ключа (перший пік): {likely_keylen}\n")

print("--- Пошук ключа ---")
guessed_key = find_key(cipher_text, likely_keylen)
print(f"=> Знайдений набір букв для ключа: {guessed_key}\n")

print("Цей ключ може бути циклічно зсунутий")

corrected_key = input("Введіть правильний ключ і натисніть Enter: ")

if not corrected_key.strip():
    print("\nВвод пустий, використовую першочергово знайдений ключ")
    corrected_key = guessed_key


print("\n--- Розшифрований текст ---")
decrypted_text = decrypt(cipher_text, corrected_key)
print(decrypted_text)

print("\n--- Графік ---")
lengths = list(ic_by_key_length.keys())
ics = list(ic_by_key_length.values())
try:
    plt.figure(figsize=(12, 6))
    plt.bar(lengths, ics, color='darkblue')
    plt.axhline(y=EXPECTED_IC_RU, color='red', linestyle='--', label=f'IC для російської мови ({EXPECTED_IC_RU})')
    plt.title('Індекс відповідності для різних довжин ключа')
    plt.xlabel('Довжина ключа')
    plt.ylabel('Середній індекс відповідності')
    plt.xticks(range(1, MAX_KEY_LEN + 1))
    plt.legend()
    plt.grid(axis='y', linestyle='--', alpha=0.7)
    print("Графік готовий. Закрийте вікно з графіком, щоб завершити програму.")
    plt.show()
except Exception as e:
    print(f"\nНе вдалося побудувати графік. Можливо, не встановлена бібліотека matplotlib.")
